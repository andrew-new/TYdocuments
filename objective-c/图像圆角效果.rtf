{\rtf1\ansi\ansicpg936\cocoartf1187\cocoasubrtf370
{\fonttbl\f0\fnil\fcharset0 Consolas;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red13\green19\blue31;\red199\green232\blue255;
\red163\green42\blue47;\red34\green185\blue18;\red217\green226\blue255;\red253\green154\blue48;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl280

\f0\fs26 \cf2 \cb3 void \cf4 addRoundedRectToPath(\cf5 CGContextRef\cf2  \cf4 context, \cf5 CGRect\cf2  \cf4 rect, \cf2 float \cf4 ovalWidth, \cf2 float \cf4 ovalHeight);\cf2 \
\pard\pardeftab720\sl280
\cf4 \{\cf2 \
\'a0float \cf4 fw, fh;\cf2 \
\'a0if \cf4 (ovalWidth == \cf6 0\cf2  \cf4 || ovalHeight == \cf6 0\cf4 ) \{\cf2 \
\'a0\'a0\cf4 CGContextAddRect(context, rect);\cf2 \
\'a0\'a0return\cf4 ;\cf2 \
\'a0\cf4 \}\cf2 \
\'a0\cf4 CGContextSaveGState(context);\cf2 \
\'a0\cf5 CGContextTranslateCTM\cf2  \cf4 (context, CGRectGetMinX(rect), CGRectGetMinY(rect));\cf2 \
\'a0\cf5 CGContextScaleCTM\cf2  \cf4 (context, ovalWidth, ovalHeight);\cf2 \
\'a0\cf4 fw = \cf5 CGRectGetWidth\cf2  \cf4 (rect) / ovalWidth;\cf2 \
\'a0\cf4 fh = \cf5 CGRectGetHeight\cf2  \cf4 (rect) / ovalHeight;\cf2 \
\'a0\cf4 CGContextMoveToPoint(context, fw, fh/\cf6 2\cf4 );\cf2 \
\'a0\cf4 CGContextAddArcToPoint(context, fw, fh, fw/\cf6 2\cf4 , fh, \cf6 1\cf4 );\cf2 \
\'a0\cf4 CGContextAddArcToPoint(context, \cf6 0\cf4 , fh, \cf6 0\cf4 , fh/\cf6 2\cf4 , \cf6 1\cf4 );\cf2 \
\'a0\cf4 CGContextAddArcToPoint(context, \cf6 0\cf4 , \cf6 0\cf4 , fw/\cf6 2\cf4 , \cf6 0\cf4 , \cf6 1\cf4 );\cf2 \
\'a0\cf4 CGContextAddArcToPoint(context, fw, \cf6 0\cf4 , fw, fh/\cf6 2\cf4 , \cf6 1\cf4 );\cf2 \
\'a0\cf4 CGContextClosePath(context);\cf2 \
\'a0\cf4 CGContextRestoreGState(context);\cf2 \
\cf4 \}\cf2 \
\'a0\'a0\
\cf4 - (\cf5 UIImage\cf2  \cf4 *)roundCornersOfImage:(\cf5 UIImage\cf2  \cf4 *)source;\cf2 \
\cf4 \{\cf2 \
\'a0int \cf4 w = source\cf7 .size.width\cf4 ;\cf2 \
\'a0int \cf4 h = source\cf7 .size.height\cf4 ;\cf2 \
\'a0\'a0\
\'a0\cf5 CGColorSpaceRef\cf2  \cf4 colorSpace = CGColorSpaceCreateDeviceRGB();\cf2 \
\'a0\cf5 CGContextRef\cf2  \cf4 context = CGBitmapContextCreate(\cf5 NULL\cf4 , w, h, \cf6 8\cf4 , \cf5 4\cf2  \cf4 * w, colorSpace, kCGImageAlphaPremultipliedFirst);\cf2 \
\'a0\'a0\
\'a0\cf4 CGContextBeginPath(context);\cf2 \
\'a0\cf5 CGRect\cf2  \cf4 rect = CGRectMake(\cf6 0\cf4 , \cf6 0\cf4 , w, h);\cf2 \
\'a0\cf4 addRoundedRectToPath(context, rect, \cf6 5\cf4 , \cf6 5\cf4 );\cf2 \
\'a0\cf4 CGContextClosePath(context);\cf2 \
\'a0\cf4 CGContextClip(context);\cf2 \
\'a0\'a0\
\'a0\cf4 CGContextDrawImage(context, CGRectMake(\cf6 0\cf4 , \cf6 0\cf4 , w, h), source\cf7 .CGImage\cf4 );\cf2 \
\'a0\'a0\
\'a0\cf5 CGImageRef\cf2  \cf4 imageMasked = CGBitmapContextCreateImage(context);\cf2 \
\'a0\cf4 CGContextRelease(context);\cf2 \
\'a0\cf4 CGColorSpaceRelease(colorSpace);\cf2 \
\'a0\'a0\
\'a0return \cf4 [\cf5 UIImage\cf2  \cf8 imageWithCGImage\cf4 :imageMasked];\'a0\'a0\'a0 \cf2 \
\cf4 \}\cf2 \
}