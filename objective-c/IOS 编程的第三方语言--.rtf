{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf390
{\fonttbl\f0\fnil\fcharset134 STHeitiSC-Light;\f1\fswiss\fcharset0 Helvetica;\f2\fswiss\fcharset0 ArialMT;
\f3\fnil\fcharset0 Consolas;\f4\fnil\fcharset0 Consolas-Bold;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red242\green242\blue242;\red255\green255\blue255;
\red96\green135\blue65;\red10\green82\blue135;\red15\green114\blue3;\red251\green0\blue129;\red9\green78\blue192;
\red0\green0\blue255;\red109\green109\blue109;\red251\green0\blue7;\red18\green139\blue4;\red164\green8\blue0;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 \
\
\
IOS \'b1\'e0\'b3\'cc\'b5\'c4\'b5\'da\'c8\'fd\'b7\'bd\'d3\'ef\'d1\'d4\
\
\pard\pardeftab720\sl480

\fs28 \cf2 \cb3 \'d2\'bb
\f1 ,Delphi\'a0for\'a0iOS\'a0(XE\'a03.5)\'a0  Erlang 
\f0 \'d3\'ef\'d1\'d4
\f1 \
\
\
\pard\pardeftab720\sl620
{\field{\*\fldinst{HYPERLINK "http://erlangprogram.com/simplest-erlang-socket-serve"}}{\fldrslt 
\f0\fs52 \cf2 \cb4 \'d7\'ee\'bc\'f2\'b5\'a5\'b5\'c4
\f2  Erlang socket
\f0 \'b7\'fe\'ce\'f1\'b6\'cb}}
\f2\fs52 \cf5 \cb4 \
\pard\pardeftab720\sl480

\f1\fs28 \cf2 \cb3 \
\pard\pardeftab720\sl300

\f3 \cf0 \cb4 -
\f4\b \cf6 module
\f3\b0 \cf0 (server).\cf2 \
\cf0 -
\f4\b \cf6 export
\f3\b0 \cf0 ([start/0]).\cf2 \
\cf0 -compile(export_all).\cf2 \
\'a0\
\pard\pardeftab720\sl300
\cf7 %% start server\cf2 \
\pard\pardeftab720\sl300
\cf0 start() ->\cf2 \
\'a0\'a0\'a0\'a0
\f4\b \cf6 case
\f3\b0 \cf2  \cf8 gen_tcp:listen\cf0 (12346, [binary, \{packet, 0\}, \{active, false\}, \{reuseaddr, true\}]) 
\f4\b \cf6 of
\f3\b0 \cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf0 \{ok, \cf9 LSocket\cf0 \} ->\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 % pool, 
\f0 \'bf\'aa\'c6\'f4
\f3 10
\f0 \'b8\'f6\'bd\'f8\'b3\'cc\'cd\'ac\'ca\'b1\'bc\'e0\'cc\'fd
\f3 \cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf0 start_servers(10, \cf9 LSocket\cf0 ),\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf8 io:format\cf0 (\cf10 "server start on port:~p~n"\cf0 , [\cf8 inet:port\cf0 (\cf9 LSocket\cf0 )]);\cf2 \
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf0 \{error, \cf9 Reason\cf0 \} ->\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf8 io:format\cf0 (\cf10 "server start error:~p~n"\cf0 , [\cf9 Reason\cf0 ]),\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf0 exit(\cf10 "error"\cf0 )\cf2 \
\'a0\'a0\'a0\'a0
\f4\b \cf6 end
\f3\b0 \cf0 .\cf2 \
\'a0\
\cf0 start_servers(0, _) ->\cf2 \
\'a0\'a0\'a0\'a0\cf0 ok;\cf2 \
\cf0 start_servers(\cf9 Num\cf0 , \cf9 ListenSock\cf0 ) ->\cf2 \
\'a0\'a0\'a0\'a0\cf0 spawn(\cf11 ?MODULE\cf0 , server, [\cf9 ListenSock\cf0 ]),\cf2 \
\'a0\'a0\'a0\'a0\cf0 start_servers(\cf9 Num\cf0 -1, \cf9 ListenSock\cf0 ).\cf2 \
\'a0\
\cf0 server(\cf9 ListenSock\cf0 ) ->\cf2 \
\'a0\'a0\'a0\'a0
\f4\b \cf6 case
\f3\b0 \cf2  \cf8 gen_tcp:accept\cf0 (\cf9 ListenSock\cf0 ) 
\f4\b \cf6 of
\f3\b0 \cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf0 \{ok,\cf9 Sock\cf0 \} ->\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf8 io:format\cf0 (\cf10 "new connect ~p~n"\cf0 , [\cf9 Sock\cf0 ]),\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf0 loop(\cf9 Sock\cf0 ),\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf0 server(\cf9 ListenSock\cf0 );\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf9 Other\cf2  \cf0 ->\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf8 io:format\cf0 (\cf10 "accept returned ~p - goodbye!~n"\cf0 ,[\cf9 Other\cf0 ]),\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf0 ok\cf2 \
\'a0\'a0\'a0\'a0
\f4\b \cf6 end
\f3\b0 \cf0 .\cf2 \
\'a0\
\cf0 loop(\cf9 Socket\cf0 ) ->\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf8 inet:setopts\cf0 (\cf9 Socket\cf0 , [\{active,once\}]),\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f4\b \cf6 receive
\f3\b0 \cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf0 \{tcp, \cf9 Socket\cf0 , \cf9 Data\cf0 \} ->\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf8 io:format\cf0 (\cf10 "receive data ~p~n"\cf0 , [\cf9 Data\cf0 ]),\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 % spawn(fun()-> router:parse(Socket, Data) end),\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf8 gen_tcp:send\cf0 (\cf9 Socket\cf0 , \cf9 Data\cf0 ),\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf0 loop(\cf9 Socket\cf0 );\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf0 \{tcp_closed, \cf9 Socket\cf0 \} ->\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf8 io:format\cf0 (\cf10 "tcp_closed~p~n"\cf0 , [\cf9 Socket\cf0 ]),\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf8 gen_tcp:close\cf0 (\cf9 Socket\cf0 )\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f4\b \cf6 end
\f3\b0 \cf0 .\cf2 \
\pard\pardeftab720\sl620
{\field{\*\fldinst{HYPERLINK "http://erlangprogram.com/%e5%9f%ba%e4%ba%8e-cocoaasyncsocket-%e7%9a%84-socket-%e5%8c%85%e8%a3%85%e7%b1%bb"}}{\fldrslt 
\f0\fs52 \cf5 \'bb\'f9\'d3\'da
\f2  cocoaAsyncSocket 
\f0 \'b5\'c4
\f2  socket 
\f0 \'b0\'fc\'d7\'b0\'c0\'e0}}
\f2\fs52 \cf5 \
\pard\pardeftab720\sl300

\f3\fs28 \cf0 #
\f4\b \cf6 import
\f3\b0 \cf2  \cf0 <Foundation/Foundation.h>\cf2 \
\cf0 #
\f4\b \cf6 import
\f3\b0 \cf2  \cf10 "AsyncSocket.h"\cf2 \
\'a0\
\pard\pardeftab720\sl300
\cf7 /*\cf2 \
\'a0\cf7 * 
\f0 \'cf\'ec\'d3\'a6
\f3 socket
\f0 \'ca\'d5\'b5\'bd\'ca\'fd\'be\'dd\'b3\'c9\'b9\'a6\'ba\'f3\'b5\'c4\'ce\'af\'cd\'d0\'d0\'ad\'d2\'e9
\f3 \cf2 \
\'a0\cf7 */\cf2 \
\pard\pardeftab720\sl300
\cf0 @protocol SocketResponseDeleGate <NSObject>\cf2 \
\'a0\
\cf0 -(
\f4\b \cf6 void
\f3\b0 \cf0 )socketResponse:(NSString *)data;\cf2 \
\'a0\
\cf0 @end\cf2 \
\'a0\
\cf0 @\cf12 interface\cf2  \cf0 MySocket : NSObject <AsyncSocketDelegate> \{\cf2 \
\'a0\'a0\'a0\'a0\cf7 // socket
\f0 \'be\'e4\'b1\'fa
\f3 \cf2 \
\'a0\'a0\'a0\'a0\cf0 AsyncSocket *socket;\cf2 \
\'a0\'a0\'a0\'a0\cf7 // response
\f0 \'ce\'af\'cd\'d0\'b6\'d4\'cf\'f3
\f3 \cf2 \
\'a0\'a0\'a0\'a0\cf0 id response;\cf2 \
\cf0 \}\cf2 \
\'a0\
\cf0 @property (nonatomic, retain) AsyncSocket *socket;\cf2 \
\cf0 @property (nonatomic, retain) id response;\cf2 \
\'a0\
\cf0 +(id)shared;\cf2 \
\cf0 -(
\f4\b \cf6 void
\f3\b0 \cf0 )setSocketDelegate:(id)delegate;\cf2 \
\cf0 -(
\f4\b \cf6 void
\f3\b0 \cf0 )connect;\cf2 \
\cf0 -(
\f4\b \cf6 void
\f3\b0 \cf0 )send:(NSString *)data;\cf2 \
\cf0 -(
\f4\b \cf6 void
\f3\b0 \cf0 )setResponseDelegate:(id<SocketResponseDeleGate>)delegate;\cf2 \
\'a0\
\cf0 @end\cf2 \
\pard\pardeftab720\sl420

\f2 \cf2 MySocket.m :
\f3 \cf0 #
\f4\b \cf6 import
\f3\b0 \cf2  \cf10 "MySocket.h"\cf2 \
\pard\pardeftab720\sl300
\cf2 \'a0\
\pard\pardeftab720\sl300
\cf0 #define GATEWAY_IP @\cf10 "192.168.1.100"\cf2 \
\cf0 #define GATEWAY_PORT \cf13 12345\cf2 \
\cf0 #define SOCKET_TIMEOUT \cf13 3\cf2 \
\'a0\
\cf0 @implementation MySocket\cf2 \
\cf0 @synthesize socket, response;\cf2 \
\'a0\
\pard\pardeftab720\sl300

\f4\b \cf6 static
\f3\b0 \cf2  \cf0 id _MySocket = nil;\cf2 \
\'a0\
\pard\pardeftab720\sl300
\cf7 // single\cf2 \
\pard\pardeftab720\sl300
\cf0 +(id)shared\cf2 \
\cf0 \{\cf2 \
\'a0\'a0\'a0\'a0
\f4\b \cf6 if
\f3\b0 \cf2  \cf0 (nil == _MySocket) \{\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf0 _MySocket = [[MySocket alloc] init];\cf2 \
\'a0\'a0\'a0\'a0\cf0 \}\cf2 \
\'a0\'a0\'a0\'a0
\f4\b \cf6 return
\f3\b0 \cf2  \cf0 _MySocket;\cf2 \
\cf0 \}\cf2 \
\'a0\
\cf0 -(id)init\cf2 \
\cf0 \{\cf2 \
\'a0\'a0\'a0\'a0\cf0 socket = [[AsyncSocket alloc] initWithDelegate:self];\cf2 \
\'a0\'a0\'a0\'a0
\f4\b \cf6 return
\f3\b0 \cf2  \cf0 self;\cf2 \
\cf0 \}\cf2 \
\'a0\
\cf0 -(
\f4\b \cf6 void
\f3\b0 \cf0 )setSocketDelegate:(id)delegate\cf2 \
\cf0 \{\cf2 \
\'a0\'a0\'a0\'a0\cf0 [socket setDelegate:delegate];\cf2 \
\cf0 \}\cf2 \
\'a0\
\cf0 -(
\f4\b \cf6 void
\f3\b0 \cf0 )connect\cf2 \
\cf0 \{\cf2 \
\'a0\'a0\'a0\'a0\cf0 @
\f4\b \cf6 try
\f3\b0 \cf2  \cf0 \{\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf0 [socket connectToHost:GATEWAY_IP onPort:GATEWAY_PORT error:nil];\cf2 \
\'a0\'a0\'a0\'a0\cf0 \}\cf2 \
\'a0\'a0\'a0\'a0\cf0 @
\f4\b \cf6 catch
\f3\b0 \cf2  \cf0 (NSException *exception) \{\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf0 NSLog(@\cf10 "connect exception %@,%@"\cf0 , [exception name], [exception description]);\cf2 \
\'a0\'a0\'a0\'a0\cf0 \}\cf2 \
\'a0\
\cf0 \}\cf2 \
\'a0\
\cf0 -(
\f4\b \cf6 void
\f3\b0 \cf0 )send:(NSString *)data\cf2 \
\cf0 \{\cf2 \
\'a0\'a0\'a0\'a0\cf0 NSLog(@\cf10 "socket send start %f, data %@"\cf0 , [[NSDate date] timeIntervalSince1970], data);\cf2 \
\'a0\'a0\'a0\'a0\cf0 [socket readDataWithTimeout:SOCKET_TIMEOUT tag:\cf13 1\cf0 ];\cf2 \
\'a0\'a0\'a0\'a0\cf0 [socket writeData:[data dataUsingEncoding:NSUTF8StringEncoding] withTimeout:SOCKET_TIMEOUT tag:\cf13 1\cf0 ];\cf2 \
\cf0 \}\cf2 \
\'a0\
\cf0 -(
\f4\b \cf6 void
\f3\b0 \cf0 )setResponseDelegate:(id<SocketResponseDeleGate>)delegate\cf2 \
\cf0 \{\cf2 \
\'a0\'a0\'a0\'a0\cf0 [self setResponse:delegate];\cf2 \
\cf0 \}\cf2 \
\'a0\
\cf0 -(
\f4\b \cf6 void
\f3\b0 \cf0 )dealloc\cf2 \
\cf0 \{\cf2 \
\'a0\'a0\'a0\'a0\cf0 NSLog(@\cf10 "MySocket dealloc"\cf0 );\cf2 \
\'a0\'a0\'a0\'a0
\f4\b \cf6 if
\f3\b0 \cf2  \cf0 (socket) \{\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf0 [socket disconnect];\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf0 NSLog(@\cf10 "socket disconnected"\cf0 );\cf2 \
\'a0\'a0\'a0\'a0\cf0 \}\cf2 \
\'a0\'a0\'a0\'a0\cf0 [
\f4\b \cf6 super
\f3\b0 \cf2  \cf0 dealloc];\cf2 \
\cf0 \}\cf2 \
\'a0\
\cf0 - (
\f4\b \cf6 void
\f3\b0 \cf0 )onSocket:(AsyncSocket *)sock didConnectToHost:(NSString *)host port:(UInt16)port\{\cf2 \
\'a0\'a0\'a0\'a0\cf0 NSLog(@\cf10 "did connect to host %@:%d"\cf0 , host, port);\cf2 \
\cf0 \}\cf2 \
\'a0\
\cf0 - (
\f4\b \cf6 void
\f3\b0 \cf0 )onSocket:(AsyncSocket *)sock didReadData:(NSData *)data withTag:(long)tag\{\cf2 \
\'a0\'a0\'a0\'a0\cf0 NSString* message = [[[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding] autorelease];\cf2 \
\'a0\'a0\'a0\'a0\cf0 NSLog(@\cf10 "ReadData is: \\n%@"\cf0 ,message);\cf2 \
\'a0\'a0\'a0\'a0\cf0 NSLog(@\cf10 "socket end %f"\cf0 , [[NSDate date] timeIntervalSince1970]);\cf2 \
\'a0\
\'a0\'a0\'a0\'a0
\f4\b \cf6 if
\f3\b0 \cf2  \cf0 (response) \{\cf2 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf0 [response socketResponse:message];\cf2 \
\'a0\'a0\'a0\'a0\cf0 \}\cf2 \
\cf0 \}\cf2 \
\'a0\
\cf0 -(BOOL)onSocketWillConnect:(AsyncSocket *)sock\cf2 \
\cf0 \{\cf2 \
\'a0\'a0\'a0\'a0\cf0 NSLog(@\cf10 "socket will connect"\cf0 );\cf2 \
\'a0\'a0\'a0\'a0
\f4\b \cf6 return
\f3\b0 \cf2  \cf0 YES;\cf2 \
\cf0 \}\cf2 \
\'a0\
\cf0 -(
\f4\b \cf6 void
\f3\b0 \cf0 )onSocket:(AsyncSocket *)sock willDisconnectWithError:(NSError *)err\cf2 \
\cf0 \{\cf2 \
\'a0\'a0\'a0\'a0\cf0 NSLog(@\cf10 "socket will disconnect, %@"\cf0 , [err localizedDescription]);\cf2 \
\cf0 \}\cf2 \
\'a0\
\cf0 -(
\f4\b \cf6 void
\f3\b0 \cf0 )onSocketDidDisconnect:(AsyncSocket *)sock\cf2 \
\cf0 \{\cf2 \
\'a0\'a0\'a0\'a0\cf0 NSLog(@\cf10 "socket did disconnect"\cf0 );\cf2 \
\cf0 \}\cf2 \
\'a0\
\cf0 @end\cf2 \
\pard\pardeftab720\sl420

\f2 \cf2 MySocket
\f0 \'d7\'f7\'ce\'aa\'d7\'d4\'bc\'ba\'b5\'c4
\f2  socket
\f0 \'c0\'e0\'bf\'e2\'a3\'ac\'cf\'c2\'c3\'e6\'ca\'c7\'d4\'da\'c6\'e4\'cb\'fb\'b5\'d8\'b7\'bd\'b5\'f7\'d3\'c3:\
\pard\pardeftab720\sl300

\f3 \cf0 MySocket *mySocket = [MySocket shared];\cf2 \
\'a0\'a0\'a0\'a0\cf0 [mySocket connect];\cf2 \
\'a0\'a0\'a0\'a0\cf0 [mySocket setResponseDelegate:self];\cf2 \
\'a0\'a0\'a0\'a0\cf0 [mySocket send:@\cf10 "hello"\cf0 ];\cf2 \
\pard\pardeftab720\sl420

\f1 \cf2 \cb3 \
\pard\pardeftab720\sl480

\f0 \cf14 \'b6\'fe
\f1  ,html5+jquery+css3;\cf2 \
\
\
\
\
\
\
\

\f0\fs24 \cf0 \cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
}